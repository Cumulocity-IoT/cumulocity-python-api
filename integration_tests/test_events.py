# Copyright (c) 2020 Software AG,
# Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA,
# and/or its subsidiaries and/or its affiliates and/or their licensors.
# Use, reproduction, transfer, publication or disclosure is prohibited except
# as specifically provided for in your License Agreement with Software AG.

from __future__ import annotations

from logging import Logger

import pytest

from c8y_api import CumulocityApi
from c8y_api.model import Event
from model import Device
from tests import RandomNameGenerator


@pytest.fixture(scope='session')
def sample_device(logger: Logger, live_c8y: CumulocityApi) -> Device:
    """Provide an sample device, jsut for testing purposes."""

    typename = RandomNameGenerator.random_name()
    device = Device(live_c8y, type=typename, name=typename).create()
    logger.info(f"Created test device #{device.id}, name={device.name}")

    yield device

    device.delete()
    logger.info(f"Deleted test device #{device.id}")


def test_CRUD(live_c8y: CumulocityApi, sample_device: Device):  # noqa (case)
    """Verify that basic CRUD functionality works."""

    typename = RandomNameGenerator.random_name()
    event = Event(c8y=live_c8y, type=typename, text=f'{typename} text', source=sample_device.id)

    created_event = event.create()
    try:
        # 1) assert correct creation
        assert created_event.id
        assert created_event.type == typename
        assert typename in created_event.text
        assert created_event.time  # auto generated by API
        assert created_event.creation_time  # auto generated by Cumulocity

        # 2) update updatable fields
        created_event.text = f'{typename} updated'
        updated_event = created_event.update()

        # 3) assert updates
        assert updated_event.text == created_event.text
    finally:
        created_event.delete()

    # 4) assert deletion
    with pytest.raises(KeyError) as e:
        live_c8y.events.get(created_event.id)
        assert created_event.id in str(e)
